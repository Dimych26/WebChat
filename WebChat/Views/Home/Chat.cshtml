@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<div id="inputForm" class="form-row">
    <input type="text" class="form-control col-3" id="message" />
    <input type="button" id="sendBtn" class="btn btn-primary ml-3" value="Отправить" />
</div>
<div id="chatroom" class="mt-4"></div>

<script src="https://peterolson.github.io/BigInteger.js/BigInteger.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js" integrity="sha256-/H4YS+7aYb9kJ5OKhFYPUjSJdrtV6AeyJOtTkw6X72o=" crossorigin="anonymous"></script>
<script>
    window.onload = function () {

        var messagesFromDb = getMessages()

        for (var i = 0; i < messagesFromDb.length; i++) {

            console.log(document);
            var elem = document.createElement("p");
            elem.appendChild(document.createTextNode(messagesFromDb[i]));
            var lastElem = document.getElementById("chatroom").firstChild;
            document.getElementById("chatroom").appendChild(elem);
        }
    };

    var alice;
    var ReceiverPublicKey;
    var MyPublicKey = Math.floor(Math.random() * 10) + 2;
    var MyPrivateKey = Math.floor(Math.random() * 10) + 2;

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/chat")
        .build();

    console.log(hubConnection);
    hubConnection.on("Send", function (data) {

        var elem = document.createElement("p");
        var message = alice.Decrypt(data);
        elem.appendChild(document.createTextNode(message));
        var lastElem = document.getElementById("chatroom").lastChild;
        document.getElementById("chatroom").appendChild(elem);
        //document.getElementById("chatroom").insertBefore(elem, lastElem.nextSibling);

        createMessage(message);

    });

    hubConnection.on("SendPublicKey", function (data) {

        if (alice == undefined) {
            ReceiverPublicKey = data;
            alice = new Endpoint([MyPublicKey, ReceiverPublicKey].sort(), MyPrivateKey);

            hubConnection.invoke("SendPublicKey", MyPublicKey);
        }
        hubConnection.invoke("SendPartialKey", alice.CreatePartialKey())
    });

    hubConnection.on("SendPartialKey", function (data) {
        alice.CreateFullKey(data);
    });

    document.getElementById("sendBtn").addEventListener("click", function (e) {
        var message = document.getElementById("message").value;

        hubConnection.invoke("Send", alice.Encrypt(message));

        var elem = document.createElement("p");
        elem.appendChild(document.createTextNode(message));
        var lastElem = document.getElementById("chatroom").lastChild;
        document.getElementById("chatroom").appendChild(elem);
        //document.getElementById("chatroom").insertBefore(elem, lastElem.nextSibling);
        document.getElementById("message").value = '';

    });

    hubConnection.on("NewUserConnected", function (data) {
        alice = null;

        hubConnection.invoke("SendPublicKey", MyPublicKey);
    });

    hubConnection.start();

    class Endpoint {

        constructor(publicKeys, privateKey) {
            this.publicKey1 = publicKeys[0];
            this.publicKey2 = publicKeys[1];
            this.privateKey = privateKey;
        }

        //constructor(publicKey1, publicKey2, privateKey) {
        //    this.publicKey1 = publicKey1;
        //    this.publicKey2 = publicKey2;
        //    this.privateKey = privateKey;
        //}

        GetPublicKey() {
            return this.publicKey1;
        }

        GetAnotherUserPublicKey() {
            return this.publicKey2;
        }

        SetAnotherUserPublicKey(publicKey) {
            this.publicKey2 = publicKey;
        }

        Encrypt(message) {
            var sb = ""

            for (var i = 0; i < message.length; i++) {
                console.log(message[i].charCodeAt(0));
                sb += String.fromCharCode((message[i].charCodeAt(0) + this.fullKey));
            }

            console.log("Encrypted:" + sb);
            //for (var item in message) {
            //    sb += ((item.charCodeAt(0) + this.fullKey));
            //}

            return sb;
        }
        Decrypt(encryptedMessage) {
            var sb = "";

            for (var i = 0; i < encryptedMessage.length; i++) {
                sb += String.fromCharCode(((encryptedMessage[i].charCodeAt(0) - this.fullKey)));
            }

            return sb;
        }
        CreateFullKey(partialKey) {
            console.log("PartialKey():" + partialKey);
            console.log("PrivateKey():" + this.privateKey);
            console.log("PublicKey2():" + this.publicKey2);
            this.fullKey = Math.pow(partialKey, this.privateKey);
            this.fullKey %= this.publicKey2;
            console.log('FullKey: ' + this.fullKey);

            //var key = bigInt(partialKey).modPow(this.privateKey, this.publicKey2)
            //console.log(key.valueOf());
            //this.fullKey = key.valueOf();
        }
        CreatePartialKey() {

            //alert(this.Modulo(this.publicKey1).pow(this.privateKey).valueOf(), this.publicKey2))
            //var key = bigInt(234).pow(934) % 568;

            //console.log(key);
            //var key = bigInt(234).modPow(934, 568);
            //console.log(key.valueOf());
            //return key.value;

            console.log('PublicKey1: ' + this.publicKey1);
            console.log('PublicKey2: ' + this.publicKey2);

            var a = Math.pow(this.publicKey1, this.privateKey);
            a %= this.publicKey2;
            console.log('PartialKey: ' + a);
            //this.CreateFullKey(a);
            return a;
        }

        Modulo(divident, divisor) {
            var partLength = 10;

            while (divident.length > partLength) {
                var part = divident.substring(0, partLength);
                divident = (part % divisor) + divident.substring(partLength);
            }

            return divident % divisor;
        }
    }

    function createMessage(data) {
        console.log(data);
        var model = {
            Message: encryptMessageToDb(data)
        };

        $.ajax({
            url: '/api/message/create',
            type: 'POST',
            dataType: 'JSON',
            data: JSON.stringify(model),
            contentType: "application/json; charset=utf-8",
            statusCode: {
                400: function (error) {
                    alert(error.responseText);
                },
                500: function (error) {
                    alert(error.responseText);
                }
            }
        });
    }

    function getMessages() {
        var messages = [];
        $.ajax({
            url: '/api/message/getMessages',
            type: 'GET',
            async: false,
            dataType: 'JSON',
            contentType: "application/json; charset=utf-8",
            statusCode: {
                200: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        messages.push(decryptMessageFromDb(data[i].message));
                    }
                },
                400: function (error) {
                    alert(error.responseText);
                },
                500: function (error) {
                    alert(error.responseText);
                }
            }
        });
        return messages;
    }

    function decryptMessageFromDb(encryptedMessage) {
        return CryptoJS.AES.decrypt(encryptedMessage, "sdYe573MBdw_.Gt6").toString(CryptoJS.enc.Utf8);
    }
    function encryptMessageToDb(message) {
        return CryptoJS.AES.encrypt(message, "sdYe573MBdw_.Gt6").toString();
    }

</script>
